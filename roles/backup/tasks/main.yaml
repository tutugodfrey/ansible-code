---
- name: clone repo
  git:
     clone: true
     single_branch: true
     repo: git@github.com:one-thd/awx.git
     dest: /tmp/awx/
     version: branch_name/HEAD
     key_file: /root/.ssh/id_rsa
  delegate_to: "{{ inventory_hostname }}"
  run_once: true
  register: awx_repo

- name: build kustomization
  shell:
    chdir: /tmp/awx/
    cmd: kustomize build overlays/backup > /tmp/awx/backup.yaml
  delegate_to: "{{ inventory_hostname }}"
  run_once: true
  register: awx_backup

---
- name: Retrieve AWX secrets from Vault
  uri:
    url: "{{ vault_url }}/v1/thdks/data/global/awx"
    method: GET
    headers:
      Content-Type: application/json
      X-Vault-Token: "{{ vault_token }}"
    validate_certs: no
  register: awx_credentials
  run_once: true
  delegate_to: localhost

- name: Set variables
  set_fact:
    _awxbackup_default:
      api_version: awx.ansible.com/v1beta1
      kind: AWXBackup
      namespace: awx
      backup_name: "awxbackup-{{ lookup('pipe', 'date +%Y-%m-%d-%H-%M-%S') }}"
      timeout: 200
      keep_days: 4
  run_once: true
  delegate_to: "{{ inventory_hostname }}"

- name: Construct custom variables
  set_fact:
    _awxbackup_config:
      api_version: "{{ awxbackup_api_version | default(_awxbackup_default.api_version, true) }}"
      kind: "{{ awxbackup_kind | default(_awxbackup_default.kind, true) }}"
      namespace: "{{ awxbackup_namespace | default(_awxbackup_default.namespace, true) }}"
      timeout: "{{ awxbackup_timeout | default(_awxbackup_default.timeout, true) }}"
      keep_days: "{{ awxbackup_keep_days | default(_awxbackup_default.keep_days, true) }}"
      awx_admin_username: "{{ awx_admin_username }}"
      awx_admin_password: "{{ awx_admin_password }}"
      host: "{{ awx_service_host  }}"
      artifactory_url: "https://uxbinaries.artifactory.homedepot.com/artifactory/uxbinaries-release-local/thdks/awx-backup"
      artifactory_username: "{{ artifactory_username }}"
      artifactory_password: "{{ artifactory_password }}"
      backup_name: "{{ awxbackup_name | default(_awxbackup_default.backup_name, true) }}"
      backup_dir: "/tmp/awx-backups"
      awx_export_tar_file: "{{ _awxbackup_default.backup_name }}.tar"
      export_prefix: _awxbackup_
  run_once: true
  delegate_to: "{{ inventory_hostname }}"

- name: Set awx token
  shell: awx login
  environment:
    CONTROLLER_HOST: "{{ _awxbackup_config.host }}"
    CONTROLLER_USERNAME: "{{ _awxbackup_config.awx_admin_username }}"
    CONTROLLER_PASSWORD: "{{ _awxbackup_config.awx_admin_password }}"
  register: CONTROLLER_TOKEN
  run_once: true
  delegate_to: "{{ inventory_hostname }}"

- name: Debug
  debug:
     msg: "{{ CONTROLLER_TOKEN.stdout }}"
  run_once: true
  delegate_to: "{{ inventory_hostname }}"

- name: Create Backup Directory
  file:
    path: "{{ _awxbackup_config.backup_dir }}/{{ _awxbackup_config.backup_name }}"
    state: directory
  run_once: true
  delegate_to: "{{ inventory_hostname }}"

- name: Export AWX Inventory
  awx.awx.export:
    inventory: []
    controller_host: "{{ _awxbackup_config.host }}"
    controller_username: "{{ _awxbackup_config.awx_admin_username }}"
    controller_password: "{{ _awxbackup_config.awx_admin_password }}"
    controller_oauthtoken: "{{ CONTROLLER_TOKEN.stdout }}"
  register: _awxbackup_inventory
  run_once: true
  delegate_to: "{{ inventory_hostname }}"

- name: Export AWX Credentials
  awx.awx.export:
    credentials: []
    controller_host: "{{ _awxbackup_config.host }}"
    controller_username: "{{ _awxbackup_config.awx_admin_username }}"
    controller_password: "{{ _awxbackup_config.awx_admin_password }}"
    controller_oauthtoken: "{{ CONTROLLER_TOKEN.stdout }}"
  register: _awxbackup_credentials
  run_once: true
  delegate_to: "{{ inventory_hostname }}"

- name: Export AWX Projects
  awx.awx.export:
    projects: []
    controller_host: "{{ _awxbackup_config.host }}"
    controller_username: "{{ _awxbackup_config.awx_admin_username }}"
    controller_password: "{{ _awxbackup_config.awx_admin_password }}"
    controller_oauthtoken: "{{ CONTROLLER_TOKEN.stdout }}"
  register: _awxbackup_projects
  run_once: true
  delegate_to: "{{ inventory_hostname }}"

- name: Export AWX Notification template
  awx.awx.export:
    notification_templates: []
    controller_host: "{{ _awxbackup_config.host }}"
    controller_username: "{{ _awxbackup_config.awx_admin_username }}"
    controller_password: "{{ _awxbackup_config.awx_admin_password }}"
    controller_oauthtoken: "{{ CONTROLLER_TOKEN.stdout }}"
  register: _awxbackup_notification_templates
  run_once: true
  delegate_to: "{{ inventory_hostname }}"

- name: Export AWX applications
  awx.awx.export:
    applications: []
    controller_host: "{{ _awxbackup_config.host }}"
    controller_username: "{{ _awxbackup_config.awx_admin_username }}"
    controller_password: "{{ _awxbackup_config.awx_admin_password }}"
    controller_oauthtoken: "{{ CONTROLLER_TOKEN.stdout }}"
  register: _awxbackup_applications
  run_once: true
  delegate_to: "{{ inventory_hostname }}"

- name: Export Schedules
  awx.awx.export:
    schedules: []
    controller_host: "{{ _awxbackup_config.host }}"
    controller_username: "{{ _awxbackup_config.awx_admin_username }}"
    controller_password: "{{ _awxbackup_config.awx_admin_password }}"
    controller_oauthtoken: "{{ CONTROLLER_TOKEN.stdout }}"
  register: _awxbackup_schedules
  run_once: true
  delegate_to: "{{ inventory_hostname }}"

- name: Export job templates
  awx.awx.export:
    job_templates: []
    controller_host: "{{ _awxbackup_config.host }}"
    controller_username: "{{ _awxbackup_config.awx_admin_username }}"
    controller_password: "{{ _awxbackup_config.awx_admin_password }}"
    controller_oauthtoken: "{{ CONTROLLER_TOKEN.stdout }}"
  register: _awxbackup_job_templates
  run_once: true
  delegate_to: "{{ inventory_hostname }}"

- name: Export Credential types
  awx.awx.export:
    credential_types: []
    controller_host: "{{ _awxbackup_config.host }}"
    controller_username: "{{ _awxbackup_config.awx_admin_username }}"
    controller_password: "{{ _awxbackup_config.awx_admin_password }}"
    controller_oauthtoken: "{{ CONTROLLER_TOKEN.stdout }}"
  register: _awxbackup_credential_types
  run_once: true
  delegate_to: "{{ inventory_hostname }}"

- name: Export Execution Environments
  awx.awx.export:
    execution_environments: []
    controller_host: "{{ _awxbackup_config.host }}"
    controller_username: "{{ _awxbackup_config.awx_admin_username }}"
    controller_password: "{{ _awxbackup_config.awx_admin_password }}"
    controller_oauthtoken: "{{ CONTROLLER_TOKEN.stdout }}"
  register: _awxbackup_execution_environments
  run_once: true
  delegate_to: "{{ inventory_hostname }}"

- name: Export Organizations
  awx.awx.export:
    organizations: []
    controller_host: "{{ _awxbackup_config.host }}"
    controller_username: "{{ _awxbackup_config.awx_admin_username }}"
    controller_password: "{{ _awxbackup_config.awx_admin_password }}"
    controller_oauthtoken: "{{ CONTROLLER_TOKEN.stdout }}"
  register: _awxbackup_organizations
  run_once: true
  delegate_to: "{{ inventory_hostname }}"

- name: Export Users
  awx.awx.export:
    users: []
    controller_host: "{{ _awxbackup_config.host }}"
    controller_username: "{{ _awxbackup_config.awx_admin_username }}"
    controller_password: "{{ _awxbackup_config.awx_admin_password }}"
    controller_oauthtoken: "{{ CONTROLLER_TOKEN.stdout }}"
  register: _awxbackup_users
  run_once: true
  delegate_to: "{{ inventory_hostname }}"

- name: Export Teams
  awx.awx.export:
    teams: []
    controller_host: "{{ _awxbackup_config.host }}"
    controller_username: "{{ _awxbackup_config.awx_admin_username }}"
    controller_password: "{{ _awxbackup_config.awx_admin_password }}"
    controller_oauthtoken: "{{ CONTROLLER_TOKEN.stdout }}"
  register: _awxbackup_teams
  run_once: true
  delegate_to: "{{ inventory_hostname }}"
 
- name: Export Hosts
  awx.awx.export:
    hosts: []
    controller_host: "{{ _awxbackup_config.host }}"
    controller_username: "{{ _awxbackup_config.awx_admin_username }}"
    controller_password: "{{ _awxbackup_config.awx_admin_password }}"
    controller_oauthtoken: "{{ CONTROLLER_TOKEN.stdout }}"
  register: _awxbackup_hosts
  run_once: true
  delegate_to: "{{ inventory_hostname }}"
 
- name: Copy AWX Config files
  copy:
    content: '{{ lookup("vars", "{{_awxbackup_config.export_prefix}}{{item}}")["assets"] | to_yaml() }}'
    dest: "{{ _awxbackup_config.backup_dir }}/{{ _awxbackup_config.backup_name }}/{{ item }}.yaml"
  run_once: true
  delegate_to: "{{ inventory_hostname }}"  
  loop:
  - inventory
  - teams
  - users
  - organizations
  - execution_environments
  - credential_types
  - job_templates
  - schedules
  - applications
  - notification_templates
  - projects
  - credentials
  - hosts

- name: Archive awx config
  archive:
    path: "{{ _awxbackup_config.backup_dir }}/{{ _awxbackup_config.backup_name }}"
    dest: "{{ _awxbackup_config.backup_dir }}/{{ _awxbackup_config.awx_export_tar_file }}"
    format: tar
    mode: 0755
  run_once: true
  delegate_to: "{{ inventory_hostname }}"

- name: Backup awx config to artifactory
  uri:
    method: PUT
    url: "{{ _awxbackup_config.artifactory_url }}/{{ _awxbackup_config.awx_export_tar_file }}"
    src: "{{ _awxbackup_config.backup_dir }}/{{ _awxbackup_config.awx_export_tar_file }}"
    url_username: "{{ _awxbackup_config.artifactory_username }}"
    url_password: "{{ _awxbackup_config.artifactory_password }}"
    validate_certs: false
    timeout: 300
    force: true
    headers:
      Content-Type: application/tar
      Accept: application.json
    status_code: 201
    remote_src: no
    force_basic_auth: yes
  run_once: true
  delegate_to: "{{ inventory_hostname }}"
  
- name: Create Backup
  kubernetes.core.k8s:
    state: present
    namespace: awx
    template: 
      path: templates/awx-backup.yaml
    kubeconfig: "{{ kubeconfig }}"
    wait: true
    wait_condition:
      reason: Successful
      status: "True"
      type: Running
    wait_timeout: "{{ _awxbackup_config.timeout | int }}"
  run_once: true
  delegate_to: "{{ inventory_hostname }}"
  register: _awxbackup_created

- name: Clean up AWX Backup
  block:
    - name: Store current time
      set_fact:
        _awxbackup_now: "{{ lookup('pipe', 'date +%s') }}"

    - name: Gather existing backups
      kubernetes.core.k8s_info:
        namespace: "{{ _awxbackup_config.namespace }}"
        api_version: "{{ _awxbackup_config.api_version }}"
        kubeconfig: "{{ kubeconfig }}"
        kind: "{{ _awxbackup_config.kind }}"
      register: _awxbackup_all_backups
      run_once: true
      delegate_to: "{{ inventory_hostname }}"

    - name: Remove outdated backup
      kubernetes.core.k8s:
        api_version: "{{ _awxbackup_config.api_version }}"
        kind: "{{ _awxbackup_config.kind }}"
        namespace: "{{ _awxbackup_config.namespace }}"
        name: "{{ item.metadata.name }}"
        state: absent
        kubeconfig: "{{ kubeconfig }}"
        wait_timeout: "{{ _awxbackup_config.timeout | int }}"
        wait: true
      run_once: true
      delegate_to: "{{ inventory_hostname }}"
      loop: "{{ _awxbackup_all_backups.resources }}"
      loop_control:
        label: "{{ item.metadata.name }}"
      when: >-
        (_awxbackup_now | int)
        - ((item.metadata.creationTimestamp | to_datetime('%Y-%m-%dT%H:%M:%S%z')).strftime('%s') | int)
        > ((_awxbackup_config.keep_days | int) * 86400)
  when: (_awxbackup_config.keep_days | int) > 0